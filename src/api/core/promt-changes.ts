/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * EasyAppz API
 * API documentation for EasyAppz
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges200,
  GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges400,
  GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges500
} from './types';

import getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesMutator from '../axios';
import type { ErrorType as GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesErrorType } from '../axios';





/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º—Ç–∞.
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
 */
export const getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges = (
    applicationId: string,
    messageId: string,
    promtId: string,
 signal?: AbortSignal
) => {
      
      
      return getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesMutator<GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges200>(
      {url: `/applications/${applicationId}/messages/${messageId}/promts/${promtId}/changes`, method: 'GET', signal
    },
      );
    }
  

export const getGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesQueryKey = (applicationId: string,
    messageId: string,
    promtId: string,) => {
    return [`/applications/${applicationId}/messages/${messageId}/promts/${promtId}/changes`] as const;
    }

    
export const getGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesQueryOptions = <TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError = GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesErrorType<GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges400 | GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges500>>(applicationId: string,
    messageId: string,
    promtId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesQueryKey(applicationId,messageId,promtId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>> = ({ signal }) => getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges(applicationId,messageId,promtId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(applicationId && messageId && promtId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError, TData> & { queryKey: DataTag<QueryKey, TData> }
}

export type GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesQueryResult = NonNullable<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>>
export type GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesQueryError = GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesErrorType<GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges400 | GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges500>


export function useGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError = GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesErrorType<GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges400 | GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges500>>(
 applicationId: string,
    messageId: string,
    promtId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError = GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesErrorType<GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges400 | GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges500>>(
 applicationId: string,
    messageId: string,
    promtId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>,
          TError,
          Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
export function useGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError = GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesErrorType<GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges400 | GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges500>>(
 applicationId: string,
    messageId: string,
    promtId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> }
/**
 * @summary –ü–æ–ª—É—á–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º—Ç–∞
 */

export function useGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges<TData = Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError = GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesErrorType<GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges400 | GetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges500>>(
 applicationId: string,
    messageId: string,
    promtId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChanges>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> } {

  const queryOptions = getGetApplicationsApplicationIdMessagesMessageIdPromtsPromtIdChangesQueryOptions(applicationId,messageId,promtId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



